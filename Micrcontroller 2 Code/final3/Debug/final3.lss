
final3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000009a8  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002388  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000070e  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  000034b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd2  00000000  00000000  00003598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d9  00000000  00000000  0000416a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062d  00000000  00000000  00004443  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  00004a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000248  00000000  00000000  00004ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000063e  00000000  00000000  00004ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000552e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 13 02 	call	0x426	; 0x426 <main>
  8a:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitADC>:
#ifndef ADC_H_
#define ADC_H_

void InitADC()
{
	ADMUX=(1<<REFS0);									// For Aref=AVcc;
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	// Prescalar div factor =128
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
}
  9a:	08 95       	ret

0000009c <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
	ADMUX&=0b11100000;
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	90 7e       	andi	r25, 0xE0	; 224
  a0:	97 b9       	out	0x07, r25	; 7
	ADMUX|=ch;
  a2:	97 b1       	in	r25, 0x07	; 7
}

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
  a4:	87 70       	andi	r24, 0x07	; 7
	ADMUX&=0b11100000;
	ADMUX|=ch;
  a6:	98 2b       	or	r25, r24
  a8:	97 b9       	out	0x07, r25	; 7

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  aa:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  ac:	34 9b       	sbis	0x06, 4	; 6
  ae:	fe cf       	rjmp	.-4      	; 0xac <ReadADC+0x10>
	//Clear ADIF by writing one to it
	//Note you may be wondering why we have write one to clear it
	//This is standard way of clearing bits in io as said in datasheets.
	//The code writes '1' but it result in setting bit to '0' !!!

	ADCSRA|=(1<<ADIF);
  b0:	34 9a       	sbi	0x06, 4	; 6

	return(ADC);
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	95 b1       	in	r25, 0x05	; 5
}
  b6:	08 95       	ret

000000b8 <usart_init>:

/*Function defination*/

void usart_init()
{
	UBRRH = 0;
  b8:	10 bc       	out	0x20, r1	; 32
	UBRRL =12;
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	89 b9       	out	0x09, r24	; 9
	UCSRA|=(1<<U2X);
  be:	59 9a       	sbi	0x0b, 1	; 11
	UCSRB|= (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	88 69       	ori	r24, 0x98	; 152
  c4:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL)|(3<<UCSZ0);
  c6:	80 b5       	in	r24, 0x20	; 32
  c8:	86 68       	ori	r24, 0x86	; 134
  ca:	80 bd       	out	0x20, r24	; 32
}
  cc:	08 95       	ret

000000ce <usart_data_transmit>:


void usart_data_transmit(unsigned char data )
{
	while ( !( UCSRA & (1<<UDRE)) );
  ce:	5d 9b       	sbis	0x0b, 5	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <usart_data_transmit>
	UDR = data;
  d2:	8c b9       	out	0x0c, r24	; 12
}
  d4:	08 95       	ret

000000d6 <usart_data_receive>:

unsigned char usart_data_receive( void )
{
	while ( !(UCSRA & (1<<RXC)) );
  d6:	5f 9b       	sbis	0x0b, 7	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <usart_data_receive>
	return UDR;
  da:	8c b1       	in	r24, 0x0c	; 12
}
  dc:	08 95       	ret

000000de <usart_string_transmit>:

void usart_string_transmit(char *string)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ec 01       	movw	r28, r24
	while(*string)
  e4:	88 81       	ld	r24, Y
  e6:	88 23       	and	r24, r24
  e8:	31 f0       	breq	.+12     	; 0xf6 <usart_string_transmit+0x18>
{
	while ( !(UCSRA & (1<<RXC)) );
	return UDR;
}

void usart_string_transmit(char *string)
  ea:	21 96       	adiw	r28, 0x01	; 1
{
	while(*string)
	{
		usart_data_transmit(*string++);
  ec:	0e 94 67 00 	call	0xce	; 0xce <usart_data_transmit>
	return UDR;
}

void usart_string_transmit(char *string)
{
	while(*string)
  f0:	89 91       	ld	r24, Y+
  f2:	88 23       	and	r24, r24
  f4:	d9 f7       	brne	.-10     	; 0xec <usart_string_transmit+0xe>
	{
		usart_data_transmit(*string++);
	}
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <usart_string_receive>:

char *usart_string_receive(char *receive_string,unsigned char terminating_character)
{
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	7c 01       	movw	r14, r24
 10a:	d6 2f       	mov	r29, r22
	unsigned char temp=0x00;
 10c:	c0 e0       	ldi	r28, 0x00	; 0
	
	for(unsigned char i=0;;i++)
	{
		*(receive_string+i)=usart_data_receive();
 10e:	87 01       	movw	r16, r14
 110:	0c 0f       	add	r16, r28
 112:	11 1d       	adc	r17, r1
 114:	0e 94 6b 00 	call	0xd6	; 0xd6 <usart_data_receive>
 118:	f8 01       	movw	r30, r16
 11a:	80 83       	st	Z, r24
		if(*(receive_string+i)==terminating_character)
 11c:	8d 17       	cp	r24, r29
 11e:	11 f0       	breq	.+4      	; 0x124 <usart_string_receive+0x28>
			break;
		else
			temp++;
 120:	cf 5f       	subi	r28, 0xFF	; 255
	}
 122:	f5 cf       	rjmp	.-22     	; 0x10e <usart_string_receive+0x12>
	*(receive_string+temp)='\0';
 124:	f7 01       	movw	r30, r14
 126:	ec 0f       	add	r30, r28
 128:	f1 1d       	adc	r31, r1
 12a:	10 82       	st	Z, r1
	return receive_string;
}
 12c:	8e 2d       	mov	r24, r14
 12e:	9f 2d       	mov	r25, r15
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	ff 90       	pop	r15
 13a:	ef 90       	pop	r14
 13c:	08 95       	ret

0000013e <pHSensor>:
		
		
    }
}

int pHSensor(){
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
	int ph_ref;
	int ph_rel;
	float D0;
	float P0;
	uint16_t pH;
		DDRC = 0xff;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	84 bb       	out	0x14, r24	; 20
	
	ph_ref=ReadADC(4); //reading from D0
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
 154:	ec 01       	movw	r28, r24
	ph_rel=ReadADC(5); //reading from P0
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
	D0 = 2.0 * (ph_ref * 5.0 / 1024);
	P0 = -1*((ph_rel*5/1024) - D0)/4.8262; 
 15c:	bc 01       	movw	r22, r24
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	68 0f       	add	r22, r24
 168:	79 1f       	adc	r23, r25
 16a:	77 23       	and	r23, r23
 16c:	14 f4       	brge	.+4      	; 0x172 <pHSensor+0x34>
 16e:	61 50       	subi	r22, 0x01	; 1
 170:	7c 4f       	sbci	r23, 0xFC	; 252
 172:	67 2f       	mov	r22, r23
 174:	77 0f       	add	r23, r23
 176:	77 0b       	sbc	r23, r23
 178:	65 95       	asr	r22
 17a:	65 95       	asr	r22
 17c:	88 27       	eor	r24, r24
 17e:	77 fd       	sbrc	r23, 7
 180:	80 95       	com	r24
 182:	98 2f       	mov	r25, r24
 184:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__floatsisf>
 188:	6b 01       	movw	r12, r22
 18a:	7c 01       	movw	r14, r24
	uint16_t pH;
		DDRC = 0xff;
	
	ph_ref=ReadADC(4); //reading from D0
	ph_rel=ReadADC(5); //reading from P0
	D0 = 2.0 * (ph_ref * 5.0 / 1024);
 18c:	be 01       	movw	r22, r28
 18e:	88 27       	eor	r24, r24
 190:	77 fd       	sbrc	r23, 7
 192:	80 95       	com	r24
 194:	98 2f       	mov	r25, r24
 196:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__floatsisf>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	40 ea       	ldi	r20, 0xA0	; 160
 1a0:	50 e4       	ldi	r21, 0x40	; 64
 1a2:	0e 94 08 04 	call	0x810	; 0x810 <__mulsf3>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 e8       	ldi	r20, 0x80	; 128
 1ac:	5a e3       	ldi	r21, 0x3A	; 58
 1ae:	0e 94 08 04 	call	0x810	; 0x810 <__mulsf3>
 1b2:	9b 01       	movw	r18, r22
 1b4:	ac 01       	movw	r20, r24
 1b6:	0e 94 82 02 	call	0x504	; 0x504 <__addsf3>
 1ba:	9b 01       	movw	r18, r22
 1bc:	ac 01       	movw	r20, r24
	P0 = -1*((ph_rel*5/1024) - D0)/4.8262; 
 1be:	c7 01       	movw	r24, r14
 1c0:	b6 01       	movw	r22, r12
 1c2:	0e 94 81 02 	call	0x502	; 0x502 <__subsf3>
 1c6:	90 58       	subi	r25, 0x80	; 128
 1c8:	2b e3       	ldi	r18, 0x3B	; 59
 1ca:	30 e7       	ldi	r19, 0x70	; 112
 1cc:	4a e9       	ldi	r20, 0x9A	; 154
 1ce:	50 e4       	ldi	r21, 0x40	; 64
 1d0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__divsf3>
	
	pH = ((-5038.8 * P0 / (273.15 + 37.0)) + 7.0);
 1d4:	26 e6       	ldi	r18, 0x66	; 102
 1d6:	36 e7       	ldi	r19, 0x76	; 118
 1d8:	4d e9       	ldi	r20, 0x9D	; 157
 1da:	55 ec       	ldi	r21, 0xC5	; 197
 1dc:	0e 94 08 04 	call	0x810	; 0x810 <__mulsf3>
 1e0:	23 e3       	ldi	r18, 0x33	; 51
 1e2:	33 e1       	ldi	r19, 0x13	; 19
 1e4:	4b e9       	ldi	r20, 0x9B	; 155
 1e6:	53 e4       	ldi	r21, 0x43	; 67
 1e8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__divsf3>
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	40 ee       	ldi	r20, 0xE0	; 224
 1f2:	50 e4       	ldi	r21, 0x40	; 64
 1f4:	0e 94 82 02 	call	0x504	; 0x504 <__addsf3>
 1f8:	0e 94 4e 03 	call	0x69c	; 0x69c <__fixunssfsi>
		itoa(pH,pH3,10);
	 usart_string_transmit(pH3);
	 usart_string_transmit("\n");*/

	return pH;
}
 1fc:	86 2f       	mov	r24, r22
 1fe:	97 2f       	mov	r25, r23
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	df 90       	pop	r13
 20a:	cf 90       	pop	r12
 20c:	08 95       	ret

0000020e <MeasureR>:
	
	return _b;
}

uint32_t MeasureR()
{
 20e:	cf 92       	push	r12
 210:	df 92       	push	r13
 212:	ef 92       	push	r14
 214:	ff 92       	push	r15
	TCSSelectRed();
 216:	0e 94 57 02 	call	0x4ae	; 0x4ae <TCSSelectRed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	83 ec       	ldi	r24, 0xC3	; 195
 21c:	99 e0       	ldi	r25, 0x09	; 9
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <MeasureR+0x10>
 222:	00 c0       	rjmp	.+0      	; 0x224 <MeasureR+0x16>
 224:	00 00       	nop
	uint32_t r;

	_delay_ms(10);
	r=TCSMeasure();
 226:	0e 94 63 02 	call	0x4c6	; 0x4c6 <TCSMeasure>
 22a:	6b 01       	movw	r12, r22
 22c:	7c 01       	movw	r14, r24
 22e:	83 ec       	ldi	r24, 0xC3	; 195
 230:	99 e0       	ldi	r25, 0x09	; 9
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <MeasureR+0x24>
 236:	00 c0       	rjmp	.+0      	; 0x238 <MeasureR+0x2a>
 238:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
 23a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <TCSMeasure>
 23e:	dc 01       	movw	r26, r24
 240:	cb 01       	movw	r24, r22
 242:	c8 0e       	add	r12, r24
 244:	d9 1e       	adc	r13, r25
 246:	ea 1e       	adc	r14, r26
 248:	fb 1e       	adc	r15, r27
 24a:	83 ec       	ldi	r24, 0xC3	; 195
 24c:	99 e0       	ldi	r25, 0x09	; 9
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <MeasureR+0x40>
 252:	00 c0       	rjmp	.+0      	; 0x254 <MeasureR+0x46>
 254:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
 256:	0e 94 63 02 	call	0x4c6	; 0x4c6 <TCSMeasure>
 25a:	dc 01       	movw	r26, r24
 25c:	cb 01       	movw	r24, r22
 25e:	c8 0e       	add	r12, r24
 260:	d9 1e       	adc	r13, r25
 262:	ea 1e       	adc	r14, r26
 264:	fb 1e       	adc	r15, r27

	return r/3.3;
 266:	c7 01       	movw	r24, r14
 268:	b6 01       	movw	r22, r12
 26a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__floatunsisf>
 26e:	23 e3       	ldi	r18, 0x33	; 51
 270:	33 e3       	ldi	r19, 0x33	; 51
 272:	43 e5       	ldi	r20, 0x53	; 83
 274:	50 e4       	ldi	r21, 0x40	; 64
 276:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__divsf3>
 27a:	0e 94 4e 03 	call	0x69c	; 0x69c <__fixunssfsi>

}
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	df 90       	pop	r13
 284:	cf 90       	pop	r12
 286:	08 95       	ret

00000288 <MeasureG>:

uint32_t MeasureG()
{
 288:	cf 92       	push	r12
 28a:	df 92       	push	r13
 28c:	ef 92       	push	r14
 28e:	ff 92       	push	r15
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
	TCSSelectGreen();
 294:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TCSSelectGreen>
 298:	83 ec       	ldi	r24, 0xC3	; 195
 29a:	99 e0       	ldi	r25, 0x09	; 9
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <MeasureG+0x14>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <MeasureG+0x1a>
 2a2:	00 00       	nop
	uint32_t r;

	_delay_ms(10);
	r=TCSMeasure();
 2a4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <TCSMeasure>
 2a8:	6b 01       	movw	r12, r22
 2aa:	7c 01       	movw	r14, r24
 2ac:	83 ec       	ldi	r24, 0xC3	; 195
 2ae:	99 e0       	ldi	r25, 0x09	; 9
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <MeasureG+0x28>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <MeasureG+0x2e>
 2b6:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
 2b8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <TCSMeasure>
 2bc:	dc 01       	movw	r26, r24
 2be:	cb 01       	movw	r24, r22
 2c0:	c8 0e       	add	r12, r24
 2c2:	d9 1e       	adc	r13, r25
 2c4:	ea 1e       	adc	r14, r26
 2c6:	fb 1e       	adc	r15, r27
 2c8:	83 ec       	ldi	r24, 0xC3	; 195
 2ca:	99 e0       	ldi	r25, 0x09	; 9
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <MeasureG+0x44>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <MeasureG+0x4a>
 2d2:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
 2d4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <TCSMeasure>
 2d8:	dc 01       	movw	r26, r24
 2da:	cb 01       	movw	r24, r22
 2dc:	c8 0e       	add	r12, r24
 2de:	d9 1e       	adc	r13, r25
 2e0:	ea 1e       	adc	r14, r26
 2e2:	fb 1e       	adc	r15, r27

	return r/3;
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	23 e0       	ldi	r18, 0x03	; 3
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__udivmodsi4>

}
 2f4:	62 2f       	mov	r22, r18
 2f6:	73 2f       	mov	r23, r19
 2f8:	84 2f       	mov	r24, r20
 2fa:	95 2f       	mov	r25, r21
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	ff 90       	pop	r15
 302:	ef 90       	pop	r14
 304:	df 90       	pop	r13
 306:	cf 90       	pop	r12
 308:	08 95       	ret

0000030a <MeasureB>:

uint32_t MeasureB()
{
 30a:	cf 92       	push	r12
 30c:	df 92       	push	r13
 30e:	ef 92       	push	r14
 310:	ff 92       	push	r15
	TCSSelectBlue();
 312:	0e 94 5d 02 	call	0x4ba	; 0x4ba <TCSSelectBlue>
 316:	83 ec       	ldi	r24, 0xC3	; 195
 318:	99 e0       	ldi	r25, 0x09	; 9
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <MeasureB+0x10>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <MeasureB+0x16>
 320:	00 00       	nop
	uint32_t r;

	_delay_ms(10);
	r=TCSMeasure();
 322:	0e 94 63 02 	call	0x4c6	; 0x4c6 <TCSMeasure>
 326:	6b 01       	movw	r12, r22
 328:	7c 01       	movw	r14, r24
 32a:	83 ec       	ldi	r24, 0xC3	; 195
 32c:	99 e0       	ldi	r25, 0x09	; 9
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <MeasureB+0x24>
 332:	00 c0       	rjmp	.+0      	; 0x334 <MeasureB+0x2a>
 334:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
 336:	0e 94 63 02 	call	0x4c6	; 0x4c6 <TCSMeasure>
 33a:	dc 01       	movw	r26, r24
 33c:	cb 01       	movw	r24, r22
 33e:	c8 0e       	add	r12, r24
 340:	d9 1e       	adc	r13, r25
 342:	ea 1e       	adc	r14, r26
 344:	fb 1e       	adc	r15, r27
 346:	83 ec       	ldi	r24, 0xC3	; 195
 348:	99 e0       	ldi	r25, 0x09	; 9
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <MeasureB+0x40>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <MeasureB+0x46>
 350:	00 00       	nop

	_delay_ms(10);
	r+=TCSMeasure();
 352:	0e 94 63 02 	call	0x4c6	; 0x4c6 <TCSMeasure>
 356:	dc 01       	movw	r26, r24
 358:	cb 01       	movw	r24, r22
 35a:	c8 0e       	add	r12, r24
 35c:	d9 1e       	adc	r13, r25
 35e:	ea 1e       	adc	r14, r26
 360:	fb 1e       	adc	r15, r27

	return r/4.2;
 362:	c7 01       	movw	r24, r14
 364:	b6 01       	movw	r22, r12
 366:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__floatunsisf>
 36a:	26 e6       	ldi	r18, 0x66	; 102
 36c:	36 e6       	ldi	r19, 0x66	; 102
 36e:	46 e8       	ldi	r20, 0x86	; 134
 370:	50 e4       	ldi	r21, 0x40	; 64
 372:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__divsf3>
 376:	0e 94 4e 03 	call	0x69c	; 0x69c <__fixunssfsi>

 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	df 90       	pop	r13
 380:	cf 90       	pop	r12
 382:	08 95       	ret

00000384 <ColSensor>:
	 usart_string_transmit("\n");*/

	return pH;
}

int ColSensor(){
 384:	4f 92       	push	r4
 386:	5f 92       	push	r5
 388:	6f 92       	push	r6
 38a:	7f 92       	push	r7
 38c:	8f 92       	push	r8
 38e:	9f 92       	push	r9
 390:	af 92       	push	r10
 392:	bf 92       	push	r11
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
	
	uint8_t x=0;
	int8_t vx=1;
	DDRB = 0xff;
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	87 bb       	out	0x17, r24	; 23
	if(d==8000)
	{


		
		TCSLEDOn();
 3a0:	db 9a       	sbi	0x1b, 3	; 27

		r=MeasureR();
 3a2:	0e 94 07 01 	call	0x20e	; 0x20e <MeasureR>
 3a6:	2b 01       	movw	r4, r22
 3a8:	3c 01       	movw	r6, r24
		g=MeasureG();
 3aa:	0e 94 44 01 	call	0x288	; 0x288 <MeasureG>
 3ae:	6b 01       	movw	r12, r22
 3b0:	7c 01       	movw	r14, r24
		b=MeasureB();
 3b2:	0e 94 85 01 	call	0x30a	; 0x30a <MeasureB>
 3b6:	4b 01       	movw	r8, r22
 3b8:	5c 01       	movw	r10, r24

		TCSLEDOn();
 3ba:	db 9a       	sbi	0x1b, 3	; 27

		uint32_t smallest;

		if(r<b)
 3bc:	46 16       	cp	r4, r22
 3be:	57 06       	cpc	r5, r23
 3c0:	68 06       	cpc	r6, r24
 3c2:	79 06       	cpc	r7, r25
 3c4:	50 f4       	brcc	.+20     	; 0x3da <ColSensor+0x56>
 3c6:	c7 01       	movw	r24, r14
 3c8:	b6 01       	movw	r22, r12
 3ca:	4c 14       	cp	r4, r12
 3cc:	5d 04       	cpc	r5, r13
 3ce:	6e 04       	cpc	r6, r14
 3d0:	7f 04       	cpc	r7, r15
 3d2:	50 f4       	brcc	.+20     	; 0x3e8 <ColSensor+0x64>
 3d4:	c3 01       	movw	r24, r6
 3d6:	b2 01       	movw	r22, r4
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <ColSensor+0x64>
 3da:	c8 14       	cp	r12, r8
 3dc:	d9 04       	cpc	r13, r9
 3de:	ea 04       	cpc	r14, r10
 3e0:	fb 04       	cpc	r15, r11
 3e2:	10 f4       	brcc	.+4      	; 0x3e8 <ColSensor+0x64>
 3e4:	c7 01       	movw	r24, r14
 3e6:	b6 01       	movw	r22, r12
 3e8:	e3 ed       	ldi	r30, 0xD3	; 211
 3ea:	f0 e3       	ldi	r31, 0x30	; 48
 3ec:	31 97       	sbiw	r30, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <ColSensor+0x68>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <ColSensor+0x6e>
 3f2:	00 00       	nop
			smallest=b;
			else
			smallest=g;
		}

		smallest=smallest/10;
 3f4:	2a e0       	ldi	r18, 0x0A	; 10
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__udivmodsi4>

		_r=r/smallest;
		_g=g/smallest;
		_b=b/smallest;
 400:	c5 01       	movw	r24, r10
 402:	b4 01       	movw	r22, r8
 404:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__udivmodsi4>
	
	
	
	
	return _b;
}
 408:	82 2f       	mov	r24, r18
 40a:	93 2f       	mov	r25, r19
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	bf 90       	pop	r11
 416:	af 90       	pop	r10
 418:	9f 90       	pop	r9
 41a:	8f 90       	pop	r8
 41c:	7f 90       	pop	r7
 41e:	6f 90       	pop	r6
 420:	5f 90       	pop	r5
 422:	4f 90       	pop	r4
 424:	08 95       	ret

00000426 <main>:
uint32_t MeasureR();
uint32_t MeasureG();
uint32_t MeasureB();

int main(void)
{
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	00 d0       	rcall	.+0      	; 0x42c <main+0x6>
 42c:	00 d0       	rcall	.+0      	; 0x42e <main+0x8>
 42e:	0f 92       	push	r0
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
	
	char pH1[5];
	char Col[5];
	usart_init();
 434:	0e 94 5c 00 	call	0xb8	; 0xb8 <usart_init>
	InitADC();
 438:	0e 94 49 00 	call	0x92	; 0x92 <InitADC>
	InitTCS3200();
 43c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <InitTCS3200>
    {
        int pH2 = pHSensor();
		int Col2 = ColSensor();
		
		if(pH2>-2 || pH2<-12){
			PORTC = 0b00000001;
 440:	ff 24       	eor	r15, r15
 442:	f3 94       	inc	r15
		}
        
		itoa(Col2,Col,10);
       
		usart_string_transmit(Col);
		usart_string_transmit("\n");
 444:	0f 2e       	mov	r0, r31
 446:	f0 e6       	ldi	r31, 0x60	; 96
 448:	cf 2e       	mov	r12, r31
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	df 2e       	mov	r13, r31
 44e:	f0 2d       	mov	r31, r0
	InitTCS3200();

	
    while(1)
    {
        int pH2 = pHSensor();
 450:	0e 94 9f 00 	call	0x13e	; 0x13e <pHSensor>
 454:	8c 01       	movw	r16, r24
		int Col2 = ColSensor();
 456:	0e 94 c2 01 	call	0x384	; 0x384 <ColSensor>
		
		if(pH2>-2 || pH2<-12){
 45a:	04 5f       	subi	r16, 0xF4	; 244
 45c:	1f 4f       	sbci	r17, 0xFF	; 255
 45e:	0b 30       	cpi	r16, 0x0B	; 11
 460:	11 05       	cpc	r17, r1
 462:	10 f0       	brcs	.+4      	; 0x468 <main+0x42>
			PORTC = 0b00000001;
 464:	f5 ba       	out	0x15, r15	; 21
 466:	01 c0       	rjmp	.+2      	; 0x46a <main+0x44>
		}else{
			PORTC = 0b00000000;
 468:	15 ba       	out	0x15, r1	; 21
		}			
		
		if(Col2<16){
 46a:	80 31       	cpi	r24, 0x10	; 16
 46c:	91 05       	cpc	r25, r1
 46e:	14 f4       	brge	.+4      	; 0x474 <main+0x4e>
			PORTB = 0b00000001;
 470:	f8 ba       	out	0x18, r15	; 24
 472:	01 c0       	rjmp	.+2      	; 0x476 <main+0x50>
		}else{
			PORTB = 0b00000000;
 474:	18 ba       	out	0x18, r1	; 24
		}
        
		itoa(Col2,Col,10);
 476:	be 01       	movw	r22, r28
 478:	6f 5f       	subi	r22, 0xFF	; 255
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	4a e0       	ldi	r20, 0x0A	; 10
 47e:	50 e0       	ldi	r21, 0x00	; 0
 480:	0e 94 8d 04 	call	0x91a	; 0x91a <itoa>
       
		usart_string_transmit(Col);
 484:	ce 01       	movw	r24, r28
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	0e 94 6f 00 	call	0xde	; 0xde <usart_string_transmit>
		usart_string_transmit("\n");
 48c:	c6 01       	movw	r24, r12
 48e:	0e 94 6f 00 	call	0xde	; 0xde <usart_string_transmit>
 492:	8f e3       	ldi	r24, 0x3F	; 63
 494:	9d e0       	ldi	r25, 0x0D	; 13
 496:	a3 e0       	ldi	r26, 0x03	; 3
 498:	81 50       	subi	r24, 0x01	; 1
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	a0 40       	sbci	r26, 0x00	; 0
 49e:	e1 f7       	brne	.-8      	; 0x498 <main+0x72>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <main+0x7c>
 4a2:	00 00       	nop
 4a4:	d5 cf       	rjmp	.-86     	; 0x450 <main+0x2a>

000004a6 <InitTCS3200>:
#include "tcs3200.h"

void InitTCS3200()
{
	//Initialize S2 and S3 line as OUTPUT
	TCS_S2_DDR|=(1<<TCS_S2_POS);
 4a6:	d0 9a       	sbi	0x1a, 0	; 26
	TCS_S3_DDR|=(1<<TCS_S3_POS);
 4a8:	d1 9a       	sbi	0x1a, 1	; 26
	
	//LED Port
	TCS_LED_DDR|=(1<<TCS_LED_POS);	
 4aa:	d3 9a       	sbi	0x1a, 3	; 26
}
 4ac:	08 95       	ret

000004ae <TCSSelectRed>:


void TCSSelectRed()
{
	TCSS2Low();
 4ae:	d8 98       	cbi	0x1b, 0	; 27
	TCSS3Low();
 4b0:	d9 98       	cbi	0x1b, 1	; 27
}
 4b2:	08 95       	ret

000004b4 <TCSSelectGreen>:

void TCSSelectGreen()
{
	TCSS2High();
 4b4:	d8 9a       	sbi	0x1b, 0	; 27
	TCSS3High();
 4b6:	d9 9a       	sbi	0x1b, 1	; 27
}
 4b8:	08 95       	ret

000004ba <TCSSelectBlue>:

void TCSSelectBlue()
{
	TCSS2Low();
 4ba:	d8 98       	cbi	0x1b, 0	; 27
	TCSS3High();
 4bc:	d9 9a       	sbi	0x1b, 1	; 27
}
 4be:	08 95       	ret

000004c0 <TCSSelectClear>:

void TCSSelectClear()
{
	TCSS2High();
 4c0:	d8 9a       	sbi	0x1b, 0	; 27
	TCSS3Low();
 4c2:	d9 98       	cbi	0x1b, 1	; 27
}
 4c4:	08 95       	ret

000004c6 <TCSMeasure>:

uint32_t TCSMeasure()
{
	//If the function is entered when the level on OUT line was low
	//Then wait for it to become high.
	if(!(TCS_OUT_PORT & (1<<TCS_OUT_POS)))
 4c6:	ca 99       	sbic	0x19, 2	; 25
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <TCSMeasure+0x8>
	{
		while(!(TCS_OUT_PORT & (1<<TCS_OUT_POS)));	//Wait for rising edge	
 4ca:	ca 9b       	sbis	0x19, 2	; 25
 4cc:	fe cf       	rjmp	.-4      	; 0x4ca <TCSMeasure+0x4>
	}
	
	
	while(TCS_OUT_PORT & (1<<TCS_OUT_POS));	//Wait for falling edge
 4ce:	ca 99       	sbic	0x19, 2	; 25
 4d0:	fe cf       	rjmp	.-4      	; 0x4ce <TCSMeasure+0x8>
	
	TCNT1=0x0000;//Reset Counter
 4d2:	1d bc       	out	0x2d, r1	; 45
 4d4:	1c bc       	out	0x2c, r1	; 44
	
	TCCR1B=(1<<CS10);	//Prescaller = F_CPU/1 (Start Counting)
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	8e bd       	out	0x2e, r24	; 46
	
	while(!(TCS_OUT_PORT & (1<<TCS_OUT_POS)));	//Wait for rising edge
 4da:	ca 9b       	sbis	0x19, 2	; 25
 4dc:	fe cf       	rjmp	.-4      	; 0x4da <TCSMeasure+0x14>
	
	//Stop Timer
	TCCR1B=0x00;
 4de:	1e bc       	out	0x2e, r1	; 46
	
	return ((float)8000000UL/TCNT1);
 4e0:	6c b5       	in	r22, 0x2c	; 44
 4e2:	7d b5       	in	r23, 0x2d	; 45
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__floatunsisf>
 4ec:	9b 01       	movw	r18, r22
 4ee:	ac 01       	movw	r20, r24
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	74 e2       	ldi	r23, 0x24	; 36
 4f4:	84 ef       	ldi	r24, 0xF4	; 244
 4f6:	9a e4       	ldi	r25, 0x4A	; 74
 4f8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__divsf3>
 4fc:	0e 94 4e 03 	call	0x69c	; 0x69c <__fixunssfsi>
	
 500:	08 95       	ret

00000502 <__subsf3>:
 502:	50 58       	subi	r21, 0x80	; 128

00000504 <__addsf3>:
 504:	bb 27       	eor	r27, r27
 506:	aa 27       	eor	r26, r26
 508:	0e d0       	rcall	.+28     	; 0x526 <__addsf3x>
 50a:	48 c1       	rjmp	.+656    	; 0x79c <__fp_round>
 50c:	39 d1       	rcall	.+626    	; 0x780 <__fp_pscA>
 50e:	30 f0       	brcs	.+12     	; 0x51c <__addsf3+0x18>
 510:	3e d1       	rcall	.+636    	; 0x78e <__fp_pscB>
 512:	20 f0       	brcs	.+8      	; 0x51c <__addsf3+0x18>
 514:	31 f4       	brne	.+12     	; 0x522 <__addsf3+0x1e>
 516:	9f 3f       	cpi	r25, 0xFF	; 255
 518:	11 f4       	brne	.+4      	; 0x51e <__addsf3+0x1a>
 51a:	1e f4       	brtc	.+6      	; 0x522 <__addsf3+0x1e>
 51c:	2e c1       	rjmp	.+604    	; 0x77a <__fp_nan>
 51e:	0e f4       	brtc	.+2      	; 0x522 <__addsf3+0x1e>
 520:	e0 95       	com	r30
 522:	e7 fb       	bst	r30, 7
 524:	24 c1       	rjmp	.+584    	; 0x76e <__fp_inf>

00000526 <__addsf3x>:
 526:	e9 2f       	mov	r30, r25
 528:	4a d1       	rcall	.+660    	; 0x7be <__fp_split3>
 52a:	80 f3       	brcs	.-32     	; 0x50c <__addsf3+0x8>
 52c:	ba 17       	cp	r27, r26
 52e:	62 07       	cpc	r22, r18
 530:	73 07       	cpc	r23, r19
 532:	84 07       	cpc	r24, r20
 534:	95 07       	cpc	r25, r21
 536:	18 f0       	brcs	.+6      	; 0x53e <__addsf3x+0x18>
 538:	71 f4       	brne	.+28     	; 0x556 <__addsf3x+0x30>
 53a:	9e f5       	brtc	.+102    	; 0x5a2 <__addsf3x+0x7c>
 53c:	62 c1       	rjmp	.+708    	; 0x802 <__fp_zero>
 53e:	0e f4       	brtc	.+2      	; 0x542 <__addsf3x+0x1c>
 540:	e0 95       	com	r30
 542:	0b 2e       	mov	r0, r27
 544:	ba 2f       	mov	r27, r26
 546:	a0 2d       	mov	r26, r0
 548:	0b 01       	movw	r0, r22
 54a:	b9 01       	movw	r22, r18
 54c:	90 01       	movw	r18, r0
 54e:	0c 01       	movw	r0, r24
 550:	ca 01       	movw	r24, r20
 552:	a0 01       	movw	r20, r0
 554:	11 24       	eor	r1, r1
 556:	ff 27       	eor	r31, r31
 558:	59 1b       	sub	r21, r25
 55a:	99 f0       	breq	.+38     	; 0x582 <__addsf3x+0x5c>
 55c:	59 3f       	cpi	r21, 0xF9	; 249
 55e:	50 f4       	brcc	.+20     	; 0x574 <__addsf3x+0x4e>
 560:	50 3e       	cpi	r21, 0xE0	; 224
 562:	68 f1       	brcs	.+90     	; 0x5be <__addsf3x+0x98>
 564:	1a 16       	cp	r1, r26
 566:	f0 40       	sbci	r31, 0x00	; 0
 568:	a2 2f       	mov	r26, r18
 56a:	23 2f       	mov	r18, r19
 56c:	34 2f       	mov	r19, r20
 56e:	44 27       	eor	r20, r20
 570:	58 5f       	subi	r21, 0xF8	; 248
 572:	f3 cf       	rjmp	.-26     	; 0x55a <__addsf3x+0x34>
 574:	46 95       	lsr	r20
 576:	37 95       	ror	r19
 578:	27 95       	ror	r18
 57a:	a7 95       	ror	r26
 57c:	f0 40       	sbci	r31, 0x00	; 0
 57e:	53 95       	inc	r21
 580:	c9 f7       	brne	.-14     	; 0x574 <__addsf3x+0x4e>
 582:	7e f4       	brtc	.+30     	; 0x5a2 <__addsf3x+0x7c>
 584:	1f 16       	cp	r1, r31
 586:	ba 0b       	sbc	r27, r26
 588:	62 0b       	sbc	r22, r18
 58a:	73 0b       	sbc	r23, r19
 58c:	84 0b       	sbc	r24, r20
 58e:	ba f0       	brmi	.+46     	; 0x5be <__addsf3x+0x98>
 590:	91 50       	subi	r25, 0x01	; 1
 592:	a1 f0       	breq	.+40     	; 0x5bc <__addsf3x+0x96>
 594:	ff 0f       	add	r31, r31
 596:	bb 1f       	adc	r27, r27
 598:	66 1f       	adc	r22, r22
 59a:	77 1f       	adc	r23, r23
 59c:	88 1f       	adc	r24, r24
 59e:	c2 f7       	brpl	.-16     	; 0x590 <__addsf3x+0x6a>
 5a0:	0e c0       	rjmp	.+28     	; 0x5be <__addsf3x+0x98>
 5a2:	ba 0f       	add	r27, r26
 5a4:	62 1f       	adc	r22, r18
 5a6:	73 1f       	adc	r23, r19
 5a8:	84 1f       	adc	r24, r20
 5aa:	48 f4       	brcc	.+18     	; 0x5be <__addsf3x+0x98>
 5ac:	87 95       	ror	r24
 5ae:	77 95       	ror	r23
 5b0:	67 95       	ror	r22
 5b2:	b7 95       	ror	r27
 5b4:	f7 95       	ror	r31
 5b6:	9e 3f       	cpi	r25, 0xFE	; 254
 5b8:	08 f0       	brcs	.+2      	; 0x5bc <__addsf3x+0x96>
 5ba:	b3 cf       	rjmp	.-154    	; 0x522 <__addsf3+0x1e>
 5bc:	93 95       	inc	r25
 5be:	88 0f       	add	r24, r24
 5c0:	08 f0       	brcs	.+2      	; 0x5c4 <__addsf3x+0x9e>
 5c2:	99 27       	eor	r25, r25
 5c4:	ee 0f       	add	r30, r30
 5c6:	97 95       	ror	r25
 5c8:	87 95       	ror	r24
 5ca:	08 95       	ret

000005cc <__divsf3>:
 5cc:	0c d0       	rcall	.+24     	; 0x5e6 <__divsf3x>
 5ce:	e6 c0       	rjmp	.+460    	; 0x79c <__fp_round>
 5d0:	de d0       	rcall	.+444    	; 0x78e <__fp_pscB>
 5d2:	40 f0       	brcs	.+16     	; 0x5e4 <__divsf3+0x18>
 5d4:	d5 d0       	rcall	.+426    	; 0x780 <__fp_pscA>
 5d6:	30 f0       	brcs	.+12     	; 0x5e4 <__divsf3+0x18>
 5d8:	21 f4       	brne	.+8      	; 0x5e2 <__divsf3+0x16>
 5da:	5f 3f       	cpi	r21, 0xFF	; 255
 5dc:	19 f0       	breq	.+6      	; 0x5e4 <__divsf3+0x18>
 5de:	c7 c0       	rjmp	.+398    	; 0x76e <__fp_inf>
 5e0:	51 11       	cpse	r21, r1
 5e2:	10 c1       	rjmp	.+544    	; 0x804 <__fp_szero>
 5e4:	ca c0       	rjmp	.+404    	; 0x77a <__fp_nan>

000005e6 <__divsf3x>:
 5e6:	eb d0       	rcall	.+470    	; 0x7be <__fp_split3>
 5e8:	98 f3       	brcs	.-26     	; 0x5d0 <__divsf3+0x4>

000005ea <__divsf3_pse>:
 5ea:	99 23       	and	r25, r25
 5ec:	c9 f3       	breq	.-14     	; 0x5e0 <__divsf3+0x14>
 5ee:	55 23       	and	r21, r21
 5f0:	b1 f3       	breq	.-20     	; 0x5de <__divsf3+0x12>
 5f2:	95 1b       	sub	r25, r21
 5f4:	55 0b       	sbc	r21, r21
 5f6:	bb 27       	eor	r27, r27
 5f8:	aa 27       	eor	r26, r26
 5fa:	62 17       	cp	r22, r18
 5fc:	73 07       	cpc	r23, r19
 5fe:	84 07       	cpc	r24, r20
 600:	38 f0       	brcs	.+14     	; 0x610 <__divsf3_pse+0x26>
 602:	9f 5f       	subi	r25, 0xFF	; 255
 604:	5f 4f       	sbci	r21, 0xFF	; 255
 606:	22 0f       	add	r18, r18
 608:	33 1f       	adc	r19, r19
 60a:	44 1f       	adc	r20, r20
 60c:	aa 1f       	adc	r26, r26
 60e:	a9 f3       	breq	.-22     	; 0x5fa <__divsf3_pse+0x10>
 610:	33 d0       	rcall	.+102    	; 0x678 <__divsf3_pse+0x8e>
 612:	0e 2e       	mov	r0, r30
 614:	3a f0       	brmi	.+14     	; 0x624 <__divsf3_pse+0x3a>
 616:	e0 e8       	ldi	r30, 0x80	; 128
 618:	30 d0       	rcall	.+96     	; 0x67a <__divsf3_pse+0x90>
 61a:	91 50       	subi	r25, 0x01	; 1
 61c:	50 40       	sbci	r21, 0x00	; 0
 61e:	e6 95       	lsr	r30
 620:	00 1c       	adc	r0, r0
 622:	ca f7       	brpl	.-14     	; 0x616 <__divsf3_pse+0x2c>
 624:	29 d0       	rcall	.+82     	; 0x678 <__divsf3_pse+0x8e>
 626:	fe 2f       	mov	r31, r30
 628:	27 d0       	rcall	.+78     	; 0x678 <__divsf3_pse+0x8e>
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	bb 1f       	adc	r27, r27
 632:	26 17       	cp	r18, r22
 634:	37 07       	cpc	r19, r23
 636:	48 07       	cpc	r20, r24
 638:	ab 07       	cpc	r26, r27
 63a:	b0 e8       	ldi	r27, 0x80	; 128
 63c:	09 f0       	breq	.+2      	; 0x640 <__divsf3_pse+0x56>
 63e:	bb 0b       	sbc	r27, r27
 640:	80 2d       	mov	r24, r0
 642:	bf 01       	movw	r22, r30
 644:	ff 27       	eor	r31, r31
 646:	93 58       	subi	r25, 0x83	; 131
 648:	5f 4f       	sbci	r21, 0xFF	; 255
 64a:	2a f0       	brmi	.+10     	; 0x656 <__divsf3_pse+0x6c>
 64c:	9e 3f       	cpi	r25, 0xFE	; 254
 64e:	51 05       	cpc	r21, r1
 650:	68 f0       	brcs	.+26     	; 0x66c <__divsf3_pse+0x82>
 652:	8d c0       	rjmp	.+282    	; 0x76e <__fp_inf>
 654:	d7 c0       	rjmp	.+430    	; 0x804 <__fp_szero>
 656:	5f 3f       	cpi	r21, 0xFF	; 255
 658:	ec f3       	brlt	.-6      	; 0x654 <__divsf3_pse+0x6a>
 65a:	98 3e       	cpi	r25, 0xE8	; 232
 65c:	dc f3       	brlt	.-10     	; 0x654 <__divsf3_pse+0x6a>
 65e:	86 95       	lsr	r24
 660:	77 95       	ror	r23
 662:	67 95       	ror	r22
 664:	b7 95       	ror	r27
 666:	f7 95       	ror	r31
 668:	9f 5f       	subi	r25, 0xFF	; 255
 66a:	c9 f7       	brne	.-14     	; 0x65e <__divsf3_pse+0x74>
 66c:	88 0f       	add	r24, r24
 66e:	91 1d       	adc	r25, r1
 670:	96 95       	lsr	r25
 672:	87 95       	ror	r24
 674:	97 f9       	bld	r25, 7
 676:	08 95       	ret
 678:	e1 e0       	ldi	r30, 0x01	; 1
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	88 1f       	adc	r24, r24
 680:	bb 1f       	adc	r27, r27
 682:	62 17       	cp	r22, r18
 684:	73 07       	cpc	r23, r19
 686:	84 07       	cpc	r24, r20
 688:	ba 07       	cpc	r27, r26
 68a:	20 f0       	brcs	.+8      	; 0x694 <__divsf3_pse+0xaa>
 68c:	62 1b       	sub	r22, r18
 68e:	73 0b       	sbc	r23, r19
 690:	84 0b       	sbc	r24, r20
 692:	ba 0b       	sbc	r27, r26
 694:	ee 1f       	adc	r30, r30
 696:	88 f7       	brcc	.-30     	; 0x67a <__divsf3_pse+0x90>
 698:	e0 95       	com	r30
 69a:	08 95       	ret

0000069c <__fixunssfsi>:
 69c:	98 d0       	rcall	.+304    	; 0x7ce <__fp_splitA>
 69e:	88 f0       	brcs	.+34     	; 0x6c2 <__fixunssfsi+0x26>
 6a0:	9f 57       	subi	r25, 0x7F	; 127
 6a2:	90 f0       	brcs	.+36     	; 0x6c8 <__fixunssfsi+0x2c>
 6a4:	b9 2f       	mov	r27, r25
 6a6:	99 27       	eor	r25, r25
 6a8:	b7 51       	subi	r27, 0x17	; 23
 6aa:	a0 f0       	brcs	.+40     	; 0x6d4 <__fixunssfsi+0x38>
 6ac:	d1 f0       	breq	.+52     	; 0x6e2 <__fixunssfsi+0x46>
 6ae:	66 0f       	add	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	88 1f       	adc	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	1a f0       	brmi	.+6      	; 0x6be <__fixunssfsi+0x22>
 6b8:	ba 95       	dec	r27
 6ba:	c9 f7       	brne	.-14     	; 0x6ae <__fixunssfsi+0x12>
 6bc:	12 c0       	rjmp	.+36     	; 0x6e2 <__fixunssfsi+0x46>
 6be:	b1 30       	cpi	r27, 0x01	; 1
 6c0:	81 f0       	breq	.+32     	; 0x6e2 <__fixunssfsi+0x46>
 6c2:	9f d0       	rcall	.+318    	; 0x802 <__fp_zero>
 6c4:	b1 e0       	ldi	r27, 0x01	; 1
 6c6:	08 95       	ret
 6c8:	9c c0       	rjmp	.+312    	; 0x802 <__fp_zero>
 6ca:	67 2f       	mov	r22, r23
 6cc:	78 2f       	mov	r23, r24
 6ce:	88 27       	eor	r24, r24
 6d0:	b8 5f       	subi	r27, 0xF8	; 248
 6d2:	39 f0       	breq	.+14     	; 0x6e2 <__fixunssfsi+0x46>
 6d4:	b9 3f       	cpi	r27, 0xF9	; 249
 6d6:	cc f3       	brlt	.-14     	; 0x6ca <__fixunssfsi+0x2e>
 6d8:	86 95       	lsr	r24
 6da:	77 95       	ror	r23
 6dc:	67 95       	ror	r22
 6de:	b3 95       	inc	r27
 6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__fixunssfsi+0x3c>
 6e2:	3e f4       	brtc	.+14     	; 0x6f2 <__fixunssfsi+0x56>
 6e4:	90 95       	com	r25
 6e6:	80 95       	com	r24
 6e8:	70 95       	com	r23
 6ea:	61 95       	neg	r22
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	8f 4f       	sbci	r24, 0xFF	; 255
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	08 95       	ret

000006f4 <__floatunsisf>:
 6f4:	e8 94       	clt
 6f6:	09 c0       	rjmp	.+18     	; 0x70a <__floatsisf+0x12>

000006f8 <__floatsisf>:
 6f8:	97 fb       	bst	r25, 7
 6fa:	3e f4       	brtc	.+14     	; 0x70a <__floatsisf+0x12>
 6fc:	90 95       	com	r25
 6fe:	80 95       	com	r24
 700:	70 95       	com	r23
 702:	61 95       	neg	r22
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	8f 4f       	sbci	r24, 0xFF	; 255
 708:	9f 4f       	sbci	r25, 0xFF	; 255
 70a:	99 23       	and	r25, r25
 70c:	a9 f0       	breq	.+42     	; 0x738 <__floatsisf+0x40>
 70e:	f9 2f       	mov	r31, r25
 710:	96 e9       	ldi	r25, 0x96	; 150
 712:	bb 27       	eor	r27, r27
 714:	93 95       	inc	r25
 716:	f6 95       	lsr	r31
 718:	87 95       	ror	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b7 95       	ror	r27
 720:	f1 11       	cpse	r31, r1
 722:	f8 cf       	rjmp	.-16     	; 0x714 <__floatsisf+0x1c>
 724:	fa f4       	brpl	.+62     	; 0x764 <__floatsisf+0x6c>
 726:	bb 0f       	add	r27, r27
 728:	11 f4       	brne	.+4      	; 0x72e <__floatsisf+0x36>
 72a:	60 ff       	sbrs	r22, 0
 72c:	1b c0       	rjmp	.+54     	; 0x764 <__floatsisf+0x6c>
 72e:	6f 5f       	subi	r22, 0xFF	; 255
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	16 c0       	rjmp	.+44     	; 0x764 <__floatsisf+0x6c>
 738:	88 23       	and	r24, r24
 73a:	11 f0       	breq	.+4      	; 0x740 <__floatsisf+0x48>
 73c:	96 e9       	ldi	r25, 0x96	; 150
 73e:	11 c0       	rjmp	.+34     	; 0x762 <__floatsisf+0x6a>
 740:	77 23       	and	r23, r23
 742:	21 f0       	breq	.+8      	; 0x74c <__floatsisf+0x54>
 744:	9e e8       	ldi	r25, 0x8E	; 142
 746:	87 2f       	mov	r24, r23
 748:	76 2f       	mov	r23, r22
 74a:	05 c0       	rjmp	.+10     	; 0x756 <__floatsisf+0x5e>
 74c:	66 23       	and	r22, r22
 74e:	71 f0       	breq	.+28     	; 0x76c <__floatsisf+0x74>
 750:	96 e8       	ldi	r25, 0x86	; 134
 752:	86 2f       	mov	r24, r22
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	2a f0       	brmi	.+10     	; 0x764 <__floatsisf+0x6c>
 75a:	9a 95       	dec	r25
 75c:	66 0f       	add	r22, r22
 75e:	77 1f       	adc	r23, r23
 760:	88 1f       	adc	r24, r24
 762:	da f7       	brpl	.-10     	; 0x75a <__floatsisf+0x62>
 764:	88 0f       	add	r24, r24
 766:	96 95       	lsr	r25
 768:	87 95       	ror	r24
 76a:	97 f9       	bld	r25, 7
 76c:	08 95       	ret

0000076e <__fp_inf>:
 76e:	97 f9       	bld	r25, 7
 770:	9f 67       	ori	r25, 0x7F	; 127
 772:	80 e8       	ldi	r24, 0x80	; 128
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	08 95       	ret

0000077a <__fp_nan>:
 77a:	9f ef       	ldi	r25, 0xFF	; 255
 77c:	80 ec       	ldi	r24, 0xC0	; 192
 77e:	08 95       	ret

00000780 <__fp_pscA>:
 780:	00 24       	eor	r0, r0
 782:	0a 94       	dec	r0
 784:	16 16       	cp	r1, r22
 786:	17 06       	cpc	r1, r23
 788:	18 06       	cpc	r1, r24
 78a:	09 06       	cpc	r0, r25
 78c:	08 95       	ret

0000078e <__fp_pscB>:
 78e:	00 24       	eor	r0, r0
 790:	0a 94       	dec	r0
 792:	12 16       	cp	r1, r18
 794:	13 06       	cpc	r1, r19
 796:	14 06       	cpc	r1, r20
 798:	05 06       	cpc	r0, r21
 79a:	08 95       	ret

0000079c <__fp_round>:
 79c:	09 2e       	mov	r0, r25
 79e:	03 94       	inc	r0
 7a0:	00 0c       	add	r0, r0
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <__fp_round+0xc>
 7a4:	88 23       	and	r24, r24
 7a6:	52 f0       	brmi	.+20     	; 0x7bc <__fp_round+0x20>
 7a8:	bb 0f       	add	r27, r27
 7aa:	40 f4       	brcc	.+16     	; 0x7bc <__fp_round+0x20>
 7ac:	bf 2b       	or	r27, r31
 7ae:	11 f4       	brne	.+4      	; 0x7b4 <__fp_round+0x18>
 7b0:	60 ff       	sbrs	r22, 0
 7b2:	04 c0       	rjmp	.+8      	; 0x7bc <__fp_round+0x20>
 7b4:	6f 5f       	subi	r22, 0xFF	; 255
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	08 95       	ret

000007be <__fp_split3>:
 7be:	57 fd       	sbrc	r21, 7
 7c0:	90 58       	subi	r25, 0x80	; 128
 7c2:	44 0f       	add	r20, r20
 7c4:	55 1f       	adc	r21, r21
 7c6:	59 f0       	breq	.+22     	; 0x7de <__fp_splitA+0x10>
 7c8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ca:	71 f0       	breq	.+28     	; 0x7e8 <__fp_splitA+0x1a>
 7cc:	47 95       	ror	r20

000007ce <__fp_splitA>:
 7ce:	88 0f       	add	r24, r24
 7d0:	97 fb       	bst	r25, 7
 7d2:	99 1f       	adc	r25, r25
 7d4:	61 f0       	breq	.+24     	; 0x7ee <__fp_splitA+0x20>
 7d6:	9f 3f       	cpi	r25, 0xFF	; 255
 7d8:	79 f0       	breq	.+30     	; 0x7f8 <__fp_splitA+0x2a>
 7da:	87 95       	ror	r24
 7dc:	08 95       	ret
 7de:	12 16       	cp	r1, r18
 7e0:	13 06       	cpc	r1, r19
 7e2:	14 06       	cpc	r1, r20
 7e4:	55 1f       	adc	r21, r21
 7e6:	f2 cf       	rjmp	.-28     	; 0x7cc <__fp_split3+0xe>
 7e8:	46 95       	lsr	r20
 7ea:	f1 df       	rcall	.-30     	; 0x7ce <__fp_splitA>
 7ec:	08 c0       	rjmp	.+16     	; 0x7fe <__fp_splitA+0x30>
 7ee:	16 16       	cp	r1, r22
 7f0:	17 06       	cpc	r1, r23
 7f2:	18 06       	cpc	r1, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	f1 cf       	rjmp	.-30     	; 0x7da <__fp_splitA+0xc>
 7f8:	86 95       	lsr	r24
 7fa:	71 05       	cpc	r23, r1
 7fc:	61 05       	cpc	r22, r1
 7fe:	08 94       	sec
 800:	08 95       	ret

00000802 <__fp_zero>:
 802:	e8 94       	clt

00000804 <__fp_szero>:
 804:	bb 27       	eor	r27, r27
 806:	66 27       	eor	r22, r22
 808:	77 27       	eor	r23, r23
 80a:	cb 01       	movw	r24, r22
 80c:	97 f9       	bld	r25, 7
 80e:	08 95       	ret

00000810 <__mulsf3>:
 810:	0b d0       	rcall	.+22     	; 0x828 <__mulsf3x>
 812:	c4 cf       	rjmp	.-120    	; 0x79c <__fp_round>
 814:	b5 df       	rcall	.-150    	; 0x780 <__fp_pscA>
 816:	28 f0       	brcs	.+10     	; 0x822 <__mulsf3+0x12>
 818:	ba df       	rcall	.-140    	; 0x78e <__fp_pscB>
 81a:	18 f0       	brcs	.+6      	; 0x822 <__mulsf3+0x12>
 81c:	95 23       	and	r25, r21
 81e:	09 f0       	breq	.+2      	; 0x822 <__mulsf3+0x12>
 820:	a6 cf       	rjmp	.-180    	; 0x76e <__fp_inf>
 822:	ab cf       	rjmp	.-170    	; 0x77a <__fp_nan>
 824:	11 24       	eor	r1, r1
 826:	ee cf       	rjmp	.-36     	; 0x804 <__fp_szero>

00000828 <__mulsf3x>:
 828:	ca df       	rcall	.-108    	; 0x7be <__fp_split3>
 82a:	a0 f3       	brcs	.-24     	; 0x814 <__mulsf3+0x4>

0000082c <__mulsf3_pse>:
 82c:	95 9f       	mul	r25, r21
 82e:	d1 f3       	breq	.-12     	; 0x824 <__mulsf3+0x14>
 830:	95 0f       	add	r25, r21
 832:	50 e0       	ldi	r21, 0x00	; 0
 834:	55 1f       	adc	r21, r21
 836:	62 9f       	mul	r22, r18
 838:	f0 01       	movw	r30, r0
 83a:	72 9f       	mul	r23, r18
 83c:	bb 27       	eor	r27, r27
 83e:	f0 0d       	add	r31, r0
 840:	b1 1d       	adc	r27, r1
 842:	63 9f       	mul	r22, r19
 844:	aa 27       	eor	r26, r26
 846:	f0 0d       	add	r31, r0
 848:	b1 1d       	adc	r27, r1
 84a:	aa 1f       	adc	r26, r26
 84c:	64 9f       	mul	r22, r20
 84e:	66 27       	eor	r22, r22
 850:	b0 0d       	add	r27, r0
 852:	a1 1d       	adc	r26, r1
 854:	66 1f       	adc	r22, r22
 856:	82 9f       	mul	r24, r18
 858:	22 27       	eor	r18, r18
 85a:	b0 0d       	add	r27, r0
 85c:	a1 1d       	adc	r26, r1
 85e:	62 1f       	adc	r22, r18
 860:	73 9f       	mul	r23, r19
 862:	b0 0d       	add	r27, r0
 864:	a1 1d       	adc	r26, r1
 866:	62 1f       	adc	r22, r18
 868:	83 9f       	mul	r24, r19
 86a:	a0 0d       	add	r26, r0
 86c:	61 1d       	adc	r22, r1
 86e:	22 1f       	adc	r18, r18
 870:	74 9f       	mul	r23, r20
 872:	33 27       	eor	r19, r19
 874:	a0 0d       	add	r26, r0
 876:	61 1d       	adc	r22, r1
 878:	23 1f       	adc	r18, r19
 87a:	84 9f       	mul	r24, r20
 87c:	60 0d       	add	r22, r0
 87e:	21 1d       	adc	r18, r1
 880:	82 2f       	mov	r24, r18
 882:	76 2f       	mov	r23, r22
 884:	6a 2f       	mov	r22, r26
 886:	11 24       	eor	r1, r1
 888:	9f 57       	subi	r25, 0x7F	; 127
 88a:	50 40       	sbci	r21, 0x00	; 0
 88c:	8a f0       	brmi	.+34     	; 0x8b0 <__stack+0x51>
 88e:	e1 f0       	breq	.+56     	; 0x8c8 <__stack+0x69>
 890:	88 23       	and	r24, r24
 892:	4a f0       	brmi	.+18     	; 0x8a6 <__stack+0x47>
 894:	ee 0f       	add	r30, r30
 896:	ff 1f       	adc	r31, r31
 898:	bb 1f       	adc	r27, r27
 89a:	66 1f       	adc	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	91 50       	subi	r25, 0x01	; 1
 8a2:	50 40       	sbci	r21, 0x00	; 0
 8a4:	a9 f7       	brne	.-22     	; 0x890 <__stack+0x31>
 8a6:	9e 3f       	cpi	r25, 0xFE	; 254
 8a8:	51 05       	cpc	r21, r1
 8aa:	70 f0       	brcs	.+28     	; 0x8c8 <__stack+0x69>
 8ac:	60 cf       	rjmp	.-320    	; 0x76e <__fp_inf>
 8ae:	aa cf       	rjmp	.-172    	; 0x804 <__fp_szero>
 8b0:	5f 3f       	cpi	r21, 0xFF	; 255
 8b2:	ec f3       	brlt	.-6      	; 0x8ae <__stack+0x4f>
 8b4:	98 3e       	cpi	r25, 0xE8	; 232
 8b6:	dc f3       	brlt	.-10     	; 0x8ae <__stack+0x4f>
 8b8:	86 95       	lsr	r24
 8ba:	77 95       	ror	r23
 8bc:	67 95       	ror	r22
 8be:	b7 95       	ror	r27
 8c0:	f7 95       	ror	r31
 8c2:	e7 95       	ror	r30
 8c4:	9f 5f       	subi	r25, 0xFF	; 255
 8c6:	c1 f7       	brne	.-16     	; 0x8b8 <__stack+0x59>
 8c8:	fe 2b       	or	r31, r30
 8ca:	88 0f       	add	r24, r24
 8cc:	91 1d       	adc	r25, r1
 8ce:	96 95       	lsr	r25
 8d0:	87 95       	ror	r24
 8d2:	97 f9       	bld	r25, 7
 8d4:	08 95       	ret

000008d6 <__udivmodsi4>:
 8d6:	a1 e2       	ldi	r26, 0x21	; 33
 8d8:	1a 2e       	mov	r1, r26
 8da:	aa 1b       	sub	r26, r26
 8dc:	bb 1b       	sub	r27, r27
 8de:	fd 01       	movw	r30, r26
 8e0:	0d c0       	rjmp	.+26     	; 0x8fc <__udivmodsi4_ep>

000008e2 <__udivmodsi4_loop>:
 8e2:	aa 1f       	adc	r26, r26
 8e4:	bb 1f       	adc	r27, r27
 8e6:	ee 1f       	adc	r30, r30
 8e8:	ff 1f       	adc	r31, r31
 8ea:	a2 17       	cp	r26, r18
 8ec:	b3 07       	cpc	r27, r19
 8ee:	e4 07       	cpc	r30, r20
 8f0:	f5 07       	cpc	r31, r21
 8f2:	20 f0       	brcs	.+8      	; 0x8fc <__udivmodsi4_ep>
 8f4:	a2 1b       	sub	r26, r18
 8f6:	b3 0b       	sbc	r27, r19
 8f8:	e4 0b       	sbc	r30, r20
 8fa:	f5 0b       	sbc	r31, r21

000008fc <__udivmodsi4_ep>:
 8fc:	66 1f       	adc	r22, r22
 8fe:	77 1f       	adc	r23, r23
 900:	88 1f       	adc	r24, r24
 902:	99 1f       	adc	r25, r25
 904:	1a 94       	dec	r1
 906:	69 f7       	brne	.-38     	; 0x8e2 <__udivmodsi4_loop>
 908:	60 95       	com	r22
 90a:	70 95       	com	r23
 90c:	80 95       	com	r24
 90e:	90 95       	com	r25
 910:	9b 01       	movw	r18, r22
 912:	ac 01       	movw	r20, r24
 914:	bd 01       	movw	r22, r26
 916:	cf 01       	movw	r24, r30
 918:	08 95       	ret

0000091a <itoa>:
 91a:	fb 01       	movw	r30, r22
 91c:	9f 01       	movw	r18, r30
 91e:	e8 94       	clt
 920:	42 30       	cpi	r20, 0x02	; 2
 922:	c4 f0       	brlt	.+48     	; 0x954 <itoa+0x3a>
 924:	45 32       	cpi	r20, 0x25	; 37
 926:	b4 f4       	brge	.+44     	; 0x954 <itoa+0x3a>
 928:	4a 30       	cpi	r20, 0x0A	; 10
 92a:	29 f4       	brne	.+10     	; 0x936 <itoa+0x1c>
 92c:	97 fb       	bst	r25, 7
 92e:	1e f4       	brtc	.+6      	; 0x936 <itoa+0x1c>
 930:	90 95       	com	r25
 932:	81 95       	neg	r24
 934:	9f 4f       	sbci	r25, 0xFF	; 255
 936:	64 2f       	mov	r22, r20
 938:	77 27       	eor	r23, r23
 93a:	0e 94 be 04 	call	0x97c	; 0x97c <__udivmodhi4>
 93e:	80 5d       	subi	r24, 0xD0	; 208
 940:	8a 33       	cpi	r24, 0x3A	; 58
 942:	0c f0       	brlt	.+2      	; 0x946 <itoa+0x2c>
 944:	89 5d       	subi	r24, 0xD9	; 217
 946:	81 93       	st	Z+, r24
 948:	cb 01       	movw	r24, r22
 94a:	00 97       	sbiw	r24, 0x00	; 0
 94c:	a1 f7       	brne	.-24     	; 0x936 <itoa+0x1c>
 94e:	16 f4       	brtc	.+4      	; 0x954 <itoa+0x3a>
 950:	5d e2       	ldi	r21, 0x2D	; 45
 952:	51 93       	st	Z+, r21
 954:	10 82       	st	Z, r1
 956:	c9 01       	movw	r24, r18
 958:	0c 94 ae 04 	jmp	0x95c	; 0x95c <strrev>

0000095c <strrev>:
 95c:	dc 01       	movw	r26, r24
 95e:	fc 01       	movw	r30, r24
 960:	67 2f       	mov	r22, r23
 962:	71 91       	ld	r23, Z+
 964:	77 23       	and	r23, r23
 966:	e1 f7       	brne	.-8      	; 0x960 <strrev+0x4>
 968:	32 97       	sbiw	r30, 0x02	; 2
 96a:	04 c0       	rjmp	.+8      	; 0x974 <strrev+0x18>
 96c:	7c 91       	ld	r23, X
 96e:	6d 93       	st	X+, r22
 970:	70 83       	st	Z, r23
 972:	62 91       	ld	r22, -Z
 974:	ae 17       	cp	r26, r30
 976:	bf 07       	cpc	r27, r31
 978:	c8 f3       	brcs	.-14     	; 0x96c <strrev+0x10>
 97a:	08 95       	ret

0000097c <__udivmodhi4>:
 97c:	aa 1b       	sub	r26, r26
 97e:	bb 1b       	sub	r27, r27
 980:	51 e1       	ldi	r21, 0x11	; 17
 982:	07 c0       	rjmp	.+14     	; 0x992 <__udivmodhi4_ep>

00000984 <__udivmodhi4_loop>:
 984:	aa 1f       	adc	r26, r26
 986:	bb 1f       	adc	r27, r27
 988:	a6 17       	cp	r26, r22
 98a:	b7 07       	cpc	r27, r23
 98c:	10 f0       	brcs	.+4      	; 0x992 <__udivmodhi4_ep>
 98e:	a6 1b       	sub	r26, r22
 990:	b7 0b       	sbc	r27, r23

00000992 <__udivmodhi4_ep>:
 992:	88 1f       	adc	r24, r24
 994:	99 1f       	adc	r25, r25
 996:	5a 95       	dec	r21
 998:	a9 f7       	brne	.-22     	; 0x984 <__udivmodhi4_loop>
 99a:	80 95       	com	r24
 99c:	90 95       	com	r25
 99e:	bc 01       	movw	r22, r24
 9a0:	cd 01       	movw	r24, r26
 9a2:	08 95       	ret

000009a4 <_exit>:
 9a4:	f8 94       	cli

000009a6 <__stop_program>:
 9a6:	ff cf       	rjmp	.-2      	; 0x9a6 <__stop_program>
